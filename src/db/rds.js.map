{"version":3,"file":"rds.js","sourceRoot":"/","sources":["db/rds.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,qCAAyC;AAEzC,wEAA0F;AAE1F,MAAM,cAAc,GAAG,IAAI,wBAAc,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;AACnE,IAAI,UAAU,EAAE,iBAAiB,CAAC;AAElC,MAAM,OAAO,GAAG,GAAmD,EAAE;IACpE,MAAM,aAAa,GAA0B;QAC5C,QAAQ,EAAE,mBAAmB;KAC7B,CAAC;IACF,MAAM,MAAM,GAAe,MAAM,SAAS,CAAC,aAAa,CAAC,CAAC;IAC1D,MAAM,MAAM,GAAG;QACd,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,IAAI,EAAE,MAAM,CAAC,QAAQ;QACrB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,QAAQ,EAAE,gBAAgB;QAC1B,IAAI,EAAE,MAAM,CAAC,IAAI;KACjB,CAAC;IACF,UAAU,GAAG,0BAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAEzC,OAAO,UAAU,CAAC;AACnB,CAAC,CAAA,CAAC;AAEF,MAAM,aAAa,GAAG,GAAmD,EAAE;IAC1E,IAAI,UAAU,EAAE;QACf,OAAO,UAAU,CAAC;KAClB;IACD,IAAI,iBAAiB,EAAE;QACtB,OAAO,iBAAiB,CAAC;KACzB;IACD,iBAAiB,GAAG,OAAO,EAAE,CAAC;IAE9B,OAAO,iBAAiB,CAAC;AAC1B,CAAC,CAAA,CAAC;AAEO,sCAAa;AAEtB,MAAM,SAAS,GAAG,CAAC,aAAoC,EAAE,EAAE;IAC1D,OAAO,IAAI,OAAO,CAAa,OAAO,CAAC,EAAE;QACxC,cAAc,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,IAA4B,EAAE,EAAE;YAClF,MAAM,UAAU,GAAe,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7D,OAAO,CAAC,UAAU,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\r\n/* eslint-disable @typescript-eslint/no-var-requires */\r\nimport { SecretsManager } from 'aws-sdk';\r\nimport { GetSecretValueRequest, GetSecretValueResponse } from 'aws-sdk/clients/secretsmanager';\r\nimport { default as MySQLServerless, default as serverlessMysql } from 'serverless-mysql';\r\n\r\nconst secretsManager = new SecretsManager({ region: 'us-west-2' });\r\nlet connection, connectionPromise;\r\n\r\nconst connect = async (): Promise<serverlessMysql.ServerlessMysql> => {\r\n\tconst secretRequest: GetSecretValueRequest = {\r\n\t\tSecretId: 'rds-connection-ro',\r\n\t};\r\n\tconst secret: SecretInfo = await getSecret(secretRequest);\r\n\tconst config = {\r\n\t\thost: secret.host,\r\n\t\tuser: secret.username,\r\n\t\tpassword: secret.password,\r\n\t\tdatabase: 'replay_summary',\r\n\t\tport: secret.port,\r\n\t};\r\n\tconnection = MySQLServerless({ config });\r\n\r\n\treturn connection;\r\n};\r\n\r\nconst getConnection = async (): Promise<serverlessMysql.ServerlessMysql> => {\r\n\tif (connection) {\r\n\t\treturn connection;\r\n\t}\r\n\tif (connectionPromise) {\r\n\t\treturn connectionPromise;\r\n\t}\r\n\tconnectionPromise = connect();\r\n\r\n\treturn connectionPromise;\r\n};\r\n\r\nexport { getConnection };\r\n\r\nconst getSecret = (secretRequest: GetSecretValueRequest) => {\r\n\treturn new Promise<SecretInfo>(resolve => {\r\n\t\tsecretsManager.getSecretValue(secretRequest, (err, data: GetSecretValueResponse) => {\r\n\t\t\tconst secretInfo: SecretInfo = JSON.parse(data.SecretString);\r\n\t\t\tresolve(secretInfo);\r\n\t\t});\r\n\t});\r\n};\r\n\r\ninterface SecretInfo {\r\n\treadonly username: string;\r\n\treadonly password: string;\r\n\treadonly host: string;\r\n\treadonly port: number;\r\n\treadonly dbClusterIdentifier: string;\r\n}\r\n"]}